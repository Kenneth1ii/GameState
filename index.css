:root {
    --pixel-size: 2px;
    --grid-cell: calc( var(--pixel-size)*16);
    --bg: #9fa7e4;
}

@media( min-width: 700px) {
    :root {
        --pixel-size: 3px;
    }
}

@media( min-width: 1000px) {
    :root {
        --pixel-size:4px;
    }
}

html, body {
    height: 100%;
}

body {
    background: var(--bg);
    display: flex;
    align-items: center;
    justify-content: center;
}

.pixel-art {
    image-rendering: pixelated;
}

.frames {
    /* pen decorations */
    width: calc(var ( var(--pixel-size)*160) );
    height: calc(var(--pixel-size)*144 );
    outline: var(--pixel-size) solid#fff;
    z-index: 1;
    position: relative;
}

.camera {
    width: calc( var(--pixel-size)*160 );   /* inconvient way in css to insert variables */
    height: calc(var(--pixel-size)*144 );
    overflow: hidden;
    background: #61ddf7;
    position: relative;
}   

.map {
    image-rendering: pixelated;
    background-image: url("https://assets.codepen.io/21542/CameraDemoMap.png");
    background-size: 100%;
    width: calc(13 * var(--grid-cell));
    height: calc(10 * var(--grid-cell));    /* design of the sprites grid-cell */
    position: relative;
}

.character {
    width: calc(var(--grid-cell)*2);
    height: calc(var(--grid-cell)*2);
    position: absolute;
    overflow: hidden;
}

.shadow {
    width: calc(var(--grid-cell)*2);
    height: calc(var(--grid-cell)*2);
    position: absolute;
    left: 0;
    top: 0;
    background: url("https://assets.codepen.io/21542/DemoRpgCharacterShadow.png") no-repeat no-repeat;
    background-size: 100%;
}

.character-spritesheet {
    position: absolute;
    background: url("https://assets.codepen.io/21542/DemoRpgCharacter.png") no-repeat no-repeat;
    width: calc(var(--grid-cell)*8);
    height: calc(var(--grid-cell)*8); 
    /* full size of Sprite Image but Will be cropped from .character because 
    character is overflow:hidden. this is *8 , but {.character is *2 }, hence 4 sprites.
    */
    background-size: 100%;
}

/* Y position depending where facing.*/ 
/* Background position property actually moves the background image itself relative to the element. 
sets the initial vertical position = background-y. So itMoves/Shifts The ENtire Image.

the image is being shifted UP.
*/

.character[facing="right"] .character-spritesheet { /*CSS [attribute*=value] Selector */
    background-position-y: calc( var(--pixel-size)* -32 );  
}

.character[facing="up"] .character-spritesheet {
    background-position-y: calc(var(--pixel-size) * -64);
}

.character[facing="left"] .character-spritesheet {
    background-position-y: calc(var(--pixel-size)*-96);
}

.character[walking="true"] .character-spritesheet {
    animation: walkingAnimation 0.6s steps(4) infinite;
}
/*
.test {
    width: 250px;
    height: 250px;
    position: absolute;
    background-image: url("https://assets.codepen.io/21542/CameraDemoMap.png");
    background-repeat: no-repeat;
    background-size: 100%;
    background-position-y:  0px;
}
*/

@keyframes walkAnimation {
    from {
        transform: translate3d(0%,0%,0);
    }
    to {
        transform: -100%,0%,0;
    }
}

.dpad {
    position:absolute;
    right: calc(var(--pixel-size) * 2);
    bottom: calc(var(--pixel-size) * 2);
    width: calc(var(--pixel-size) * 37);
    height: calc(var(--pixel-size) * 38);
 }
 .dpad-button {
    appearance:none;
    outline:0;
    border:0;
    background:transparent;
    padding:0;
    cursor:pointer;
 }
 .dpad-button svg {
    display:block;
    height: calc(var(--pixel-size) * 13);
 }
 
 .dpad-button.pressed .Arrow_arrow-inset { stroke:#07c2cc; }
 .dpad-button.pressed .Arrow_arrow-body { stroke:#17dfea; }
 
 .dpad-up {
    position: absolute;
    left: calc(var(--pixel-size) * 12);
    top:0;
 }
 .dpad-down {
    position: absolute;
    bottom:var(--pixel-size);
    left: calc(var(--pixel-size) * 12);
 }
 .dpad-left {
    position: absolute;
    top: calc(var(--pixel-size) * 12);
    left:0;
 }
 .dpad-right {
    position: absolute;
    top: calc(var(--pixel-size) * 12);
    right:0;
 }
 
 .dpad {
    user-select:none;
 }